
require('dotenv/config');
const { Client } = require('discord.js');
const {OpenAI} = require('openai');

//Creates the discord client and calls for the permissions to see and reply to messages
const client = new Client(
    {
        intents: ['Guilds', 'GuildMembers', 'GuildMessages', 'MessageContent'],
    }
);

//If connection was successfull
client.on('ready', () => 
    {
        console.log('the bot is online.');
    }
);


//Prefix to ignore
const IGNORE_PREFIX = "!";

//Main channel where the bot will reply and see messages
const CHANNELS = ['1235176791669215304'];


//Connects with OpenAI project given the key on the .env file
const openai = new OpenAI({
    apiKey: process.env.OPENAI_KEY,
})

//Function to generate text
async function receiveAiReply(role, message)
{
    try 
    {        
        //Creates an array for the messages of the conversation
        let conversation=[];

        //First message of the array, it is type system (Affects behavior of the AI)
        conversation.push(
            {
                role: 'system',
                //Content affects the behavior of the bot according to the given text
                content: 'discord bot with different personas depending on user input. Now you are: '+role+' and dont put your name at the start, you already have identification!',
            }
        );

        //Fetch the last 10 messages of the conversation
        let prevMessages = await message.channel.messages.fetch({ lmit: 10});
        prevMessages.reverse();

        //For each msg check conditions

        prevMessages.forEach((msg) =>
        {
            //If message is from a bot but not the DireChatBOT
            if(msg.author.bot && msg.author.id !== client.user.id) return;
            //IF message starts with one of the condition to not include in the conversation
            if(msg.content.startsWith(IGNORE_PREFIX)||msg.content.startsWith('/image')||msg.content.startsWith('/help')) return;
            //Saves the message content for manipulations
            messageContent=msg.content;

            //If message starts with funfact, trim the /funfact
            if(msg.content.startsWith('/funfact ')) 
            {

                //Clarify this message is for the Andian personality of the DireChatBOT
                messageContent="Message to Andian "+messageContent.slice(9).trim();
                    
            }
            else
            {
                //Clarify that this message is for the DireChatBOT
                if(msg.author.id !== client.user.id) messageContent="Message to DireChatBOT (or other users) "+messageContent;
            }
            
            //Regex for the username of the users in the chat
            const username = msg.author.username.replace(/\s+/g, '_').replace(/[^\w\s]/gi, '');

            //When message is from the DireChatBOT, save as assistant
            if(msg.author.id === client.user.id)
            {
                conversation.push(
                    {
                        role:'assistant',
                        name: username,
                        content: messageContent,
                    });
                return;
            }

            //When message is from a user
            conversation.push(
                {
                    role: 'user',
                    name: username,
                    content: messageContent,
                }
            )
        });

        //Sends the information using the OpenAI API
        const response = await openai.chat.completions.create(
            {
                model: 'gpt-3.5-turbo',
                messages: conversation,
            }
        );
        //Returns the response given by the AI
        return response;
    } 
    //If any errors appear, handle them
    catch(error)
    {
        console.error('OpenAI Error:\n', error);
    } 
}


async function receiveAiImage(promptText)
{
    try 
    {
        //Generates an immage according to the prompt
        const response= await openai.images.generate
        ({
            model:"dall-e-2",
            prompt:promptText,
            size:"512x512",
            n:1,
            
        });
        //Returns the image generated by the AI
        return response;
    } catch(error)
    {
        console.error('OpenAI Error:\n', error);
    }
    
    
}

//Code to run each time a message is sent on the channel(s)
client.on('messageCreate', async (message) => 
{
    //If message author is bot itself return
    if (message.author.bot) return;
    //If message starts with "!" return
    if (message.content.startsWith(IGNORE_PREFIX)) return;

    //Help command to get info about the bot
    if (message.content.startsWith('/help'))
    {
        message.reply('Hi! I am an AI bot here to make the experience on this server more fun and chatty! \n/funfact To learn something new about a desire topic (in a victorian manner!) \n/image to generate an image of your liking! \n/roll [number] to roll a random number from 0 to [number] and see what are your chances!');
        return;
    }
    //Roll dice command
    if (message.content.startsWith('/roll')) 
    {
        // Extract the number of sides from the message
        const args = message.content.split(' ');
        let sides = parseInt(args[1]);

        // Default to 6 sides if no valid number is provided
        if (isNaN(sides) || sides < 1) 
        {
            sides = 6;
        }

        // Roll the die
        const roll = Math.floor(Math.random() * sides) + 1;

        // Send the result as a reply
        message.reply(`You rolled a ${roll} (1-${sides})`);
        return;
    }

    //Random fun fact as a weird victorian historian
    if(message.content.startsWith('/funfact '))
    {
        //Trim message to avoid including the /funfact
        const text= message.content.slice(9).trim();

        //If message is empty after /funfact
        if(text.length==0)
        {
            message.reply('Sorry but I shall not give you a fun fact is thou not express the field of interest!');
            return;
        }
        else
        {
            //Call function for AI response
            const response = await receiveAiReply('You are a Andian a weird mean victorian historian giving a fun fact, you are also quite condenscending.', message);

            //If response is empty or there is an error
            if(response==null)
            {
                message.reply("Sorry there was an error with my artificial intelligence, please try again ");
            }
            else
            {
                //Reply the user with the message given by the AI
                message.reply(response.choices[0].message.content);
            }
            
            return;
        }
    }


    //Image generator code
    if(message.content.startsWith('/image '))
    {
        //trim message to don't show /image
        const text= message.content.slice(7).trim();

        //If text is empty after /image
        if(text.length==0)
        {
            message.reply('Please give me a prompt to generate an image!');
            return;
        }
        else
        {
            //call function for AI Image generation
            const response= await receiveAiImage(text);

            //If response is emtpy or error
            if(response==null)
            {
                message.reply("Sorry there was an error with my artificial intelligence, please try again");
            }
            else
            {
                //Reply the message with the image
                message.reply("Sure here is an image of: "+text);
                message.reply(response.data[0].url);
                
            }
            return;
        }
    }


    //Reply to message using AI if no previous command was used
    if (!CHANNELS.includes(message.channelId) && !message.mentions.users.has(client.user.id)) return;
    else
    {
        //Calls function for AI response
        const response = await receiveAiReply('You are DireChatBOT a friendly discord bot!', message);
    
        //If response is null reply
        if(response==null)
            {
                message.reply(" Sorry there was an error with my artificial intelligence, please try again. ");
            }
            else
            {
                //Show the response generated by the AI
                message.reply(response.choices[0].message.content);
            }
            
            return;
    }
        
    
});

//Login with token
client.login(process.env.TOKEN);